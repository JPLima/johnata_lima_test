- hosts: localhost
  tasks:
  - name: create a vpc
    ec2_vpc_net:
      name: teste-demo-or
      cidr_block: 192.168.1.0/24
      region: us-east-1
      tags:
        module: ec2_vpc_net
        this: demo
      tenancy: default
    register: vpc
  - debug: var=vpc

  - name: create subnet
    ec2_vpc_subnet:
      state: present
      region: us-east-1
      vpc_id: "{{ vpc.vpc.id }}"
      cidr: 192.168.1.0/24
      resource_tags:
          Name: app subnet
    register: app_subnet
  - debug: var=app_subnet

  - name: Create internet gateway
    ec2_vpc_igw:
      region: us-east-1
      vpc_id: "{{ vpc.vpc.id }}"
      state: present
    register: igw
  - debug: var=igw

  - name: Set up public subnet route table
    ec2_vpc_route_table:
      vpc_id: "{{ vpc.vpc.id }}"
      region: us-east-1
      tags:
        Name: Public
      subnets:
        - "{{ app_subnet.subnet.id }}"
      routes:
        - dest: 0.0.0.0/0
          gateway_id: "{{ igw.gateway_id }}"
    register: public_route_table

  - name: Create security group 
    ec2_group:
      name: ec2_group
      description: sg with rules to ssh and application port 80
      vpc_id: "{{ vpc.vpc.id }}"
      region: us-east-1
      rules:
        - proto: tcp
          ports:
          - 22
          - 80
          cidr_ip: 0.0.0.0/0
          rule_desc: allow traffic to ports 22 and 80
    register: nsg
  - debug: var=nsg

  - name: Create the ELB only listening over port 80 
    ec2_elb_lb:
      name: load-balancer
      security_group_ids: "{{ nsg.group_id }}"
      state: present
      region: us-east-1
      subnets: "{{ app_subnet.subnet.id }}"
      listeners:
        - protocol: http
          load_balancer_port: 80
          instance_port: 80
    register: elb
  - debug: var=elb

  - name: create key pair to use on EC2
    ec2_key:
      region: us-east-1
      name: ec2_keypair
    register: key_pair
  - debug: var=key_pair

  - name: Save private key
    lineinfile: 
      create: yes 
      regexp: "NONEXISTENTLINE" 
      dest: ./{{ key_pair.key.name }}.pem 
      line: "{{ key_pair.key.private_key }}" 
      state: present
    ignore_errors: yes

  - name: Provision ec2
    ec2:
      key_name: "{{ key_pair.key.name }}"
      instance_type: t2.micro
      image: ami-0080e4c5bc078760e
      group: ec2_group
      assign_public_ip: yes
      vpc_subnet_id: "{{ app_subnet.subnet.id }}"
      region: us-east-1
      wait: true
      count: 1
      tenancy: default
    register: ec2
  - debug: var=ec2

  - name: Create ansible host.txt  file 
    lineinfile: 
      create: yes 
      regexp: "NONEXISTENTLINE" 
      dest: ./host.txt 
      line: ec2 ansible_host={{ ec2.instances[0].public_dns_name }} ansible_user=ec2-user ansible_ssh_private_key_file=./ec2_keypair.pem
      state: present  

  - name: Add  EC2 instance to the ELB, will not work at first, only when you deploy de app
    ec2_elb:
      state: present
      ec2_elbs: load-balancer
      region: us-east-1
      instance_id: "{{ ec2.instances[0].id }}"
    ignore_errors: yes

  - name: Alter html page index to listener on LB public dns
    lineinfile:
      regexp: <form action = "http://" method = "POST" id="form1">
      dest: ./files/templates/index.html
      line: <form action = "http://{{ elb.elb.dns_name }}/result" method = "POST" id="form1">
      state: present
  