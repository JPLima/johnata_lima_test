- name: create a vpc
  ec2_vpc_net:
    name: teste-demo-or
    cidr_block: 192.168.1.0/24
    region: us-east-1
    tags:
      module: ec2_vpc_net
      this: demo
    tenancy: default
  register: vpc
#- debug: var=vpc

- name: create subnet 1
  ec2_vpc_subnet:
    az: us-east-1a
    state: present
    region: us-east-1
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: 192.168.1.0/25
    resource_tags:
        Name: app subnet1
  register: app_subnet1
#- debug: var=app_subnet1

- name: create subnet 2
  ec2_vpc_subnet:
    az: us-east-1d
    state: present
    region: us-east-1
    vpc_id: "{{ vpc.vpc.id }}"
    cidr: 192.168.1.128/25
    resource_tags:
        Name: app subnet2
  register: app_subnet2
#- debug: var=app_subnet2

- name: Create internet gateway
  ec2_vpc_igw:
    region: us-east-1
    vpc_id: "{{ vpc.vpc.id }}"
    state: present
  register: igw
#- debug: var=igw

- name: Set up public subnet route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: us-east-1
    tags:
      Name: Public
    subnets:
      - "{{ app_subnet1.subnet.id }}"
      - "{{ app_subnet2.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"
  register: public_route_table

- name: Create security group 
  ec2_group:
    name: ec2_group
    description: sg with rules to ssh and application port 80
    vpc_id: "{{ vpc.vpc.id }}"
    region: us-east-1
    rules:
      - proto: tcp
        ports:
        - 22
        - 80
        - 3306
        cidr_ip: 0.0.0.0/0
        rule_desc: allow traffic to ports 22, 3306 and 80
  register: nsg
#- debug: var=nsg

- name: Create the ELB only listening over port 80 
  ec2_elb_lb:
    name: load-balancer
    security_group_ids: "{{ nsg.group_id }}"
    state: present
    region: us-east-1
    subnets: 
      - "{{ app_subnet1.subnet.id }}"
      - "{{ app_subnet2.subnet.id }}"      
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
    health_check:
      ping_protocol: http # options are http, https, ssl, tcp
      ping_port: 80
      ping_path: "/" # not required for tcp or ssl
      response_timeout: 2 # seconds
      interval: 5 # seconds
      unhealthy_threshold: 2
      healthy_threshold: 3
  register: elb
#- debug: var=elb

- name: Save network information information
  copy: 
    dest: ./files/infonetwork.json 
    content: |
      {
        "vpc_id": "{{ vpc.vpc.id }}",
        "subnetid1": "{{ app_subnet1.subnet.id }}",
        "subnetid2": "{{ app_subnet2.subnet.id }}",
        "apigw_id": "{{ igw.gateway_id }}",
        "nsg_id": "{{ nsg.group_id }}",
        "lb_dns": "{{  elb.elb.dns_name  }}",
        "elb_name": "{{  elb.elb.name  }}"
       }
